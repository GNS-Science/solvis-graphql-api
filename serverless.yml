# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: gnssciencenshm
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: solvis-graphql-api
service: nzshm22-solvis-graphql-api

configValidationMode: error

plugins:
  - serverless-wsgi
  - serverless-plugin-warmup

package:
  individually: false
  patterns:
    - '!__pycache__/**'
    - '!.git/**'
    - '!.github/**'
    - '!.pytest_cache/**'
    - '!.mypy_cache/**'
    - '!.tox/**'
    - '!dist/**'
    - '!docs/**'
    - '!/**'
    - '!node_modules/**'
    - '!package.json'
    - '!package-log.json'
    - '!poetry.lock'
    - '!tests/**'
    - '!**/test/**'
    - '!WORKING/**'
    - '!.dynamodb/**'
    - '!site/**'
    - '!*.*'
    - '!.pnp.*'
    - 'yarn.lock'
    - solvis_graphql_api/**

custom:

  # DRY constants: define all compound/generated names in one place
  # Override args are: .. defaults:
  # --app_acroym          signed-uploader
  # --s3_bucket           self:custom.app_acronym
  # --s3_key_base         self:custom.stage
  # --region              us-east-1
  # --stage               test
  # --deletion_policy     delete

  app_acronym: ${opt:acronym, self:service}
  default_stage: local
  stage: ${opt:stage, self:custom.default_stage}
  stack_name: ${self:custom.app_acronym}-${self:custom.stage}
  region: ${opt:region, self:provider.region}
  deletion_policy: Delete

  s3_bucket: ${opt:s3_bucket, self:custom.app_acronym}-${self:custom.stage}
  s3_bucket_arn: arn:aws:s3:::${self:custom.s3_bucket}
  s3_role_resource: ${self:custom.s3_bucket_arn}
  url_default_ttl: 60   # presigned URL TTL

  #serverless-wsgi settings
  wsgi:
    app: solvis_graphql_api.solvis_graphql_api.app
    packRequirements: false
    pythonBin: python3.12

  #serverless-s3-local settings
  s3:
    host: localhost
    directory: /tmp

  serverless-dynamodb:
    stages:
      - local
    start:
      # docker: true
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      sharedDb: true

  # Lambda warmer settings see https://www.serverless.com/plugins/serverless-plugin-warmup
  warmup:
    littleWarmer:
      enabled: true
      events:
        - schedule: rate(5 minutes)
      concurrency: 1

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2
  ecr:
    # In this section you can define images that will be built locally and uploaded to ECR
    images:
      app_image_0:
        path: "."
        file: Dockerfile
        buildArgs:
          STAGE: ${self:custom.stage}
        cacheFrom:
          # - my-image:latest
        platform: linux/amd64  
  environment:
    REGION: ${self:custom.region}
    S3_BUCKET_NAME: ${self:custom.s3_bucket}
    URL_DEFAULT_TTL: ${self:custom.url_default_ttl}
    DEPLOYMENT_STAGE: ${self:custom.stage}
  apiGateway:
    apiKeys:
      - name: SOLVIS_GRAPHQL_API_TempApiKey-${self:custom.stage}
        description: Api key until we have an auth function # Optional

  iam:
    role:
      statements:
        # Cloudwatch
        - Effect: Allow
          Action:
             - "cloudwatch:PutMetricData"
          Resource: "*"

        # S3 access policy
        - Effect: Allow
          Action:
            - "s3:*"
          Resource:
            - ${self:custom.s3_role_resource}
            - ${self:custom.s3_role_resource}/*

        # DynamoDB
        - Effect: Allow
          Action:
             - "dynamodb:Scan"
             - "dynamodb:Query"
             - "dynamodb:DescribeTable"
             - "dynamodb:CreateTable"
             - "dynamodb:GetItem"
             - "dynamodb:PutItem"
             - "dynamodb:ConditionCheckItem"
             - "dynamodb:UpdateItem"
          Resource: '*'
        # ECR
        - Effect: Allow
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
          Resource:
            - "arn:aws:ecr:*:461564345538:repository/*"

functions:
  ecr-app:
    description: The graphql API of ${self:service} as ECR container
    # handler: wsgi_handler.handler
    image:
      name: app_image_0
      command:
        - solvis_graphql_api.handler.handler
      entryPoint:
        - '/lambda-entrypoint.sh'

    memorySize: 2096 # optional, in MB, default is 1024
    timeout: 20 # optional, in seconds, default is 6
    events:
      - http:
          path: /{any+}
          method: OPTIONS
      - http:
          path: /{any+}
          method: POST
          private: true
      - http:
          path: /{any+}
          method: GET
          private: true
    environment:
      SERVICE_NAME: ${self:service}
      STACK_NAME: ${self:custom.stack_name}
      REGION: ${self:custom.region}
      DEPLOYMENT_STAGE: ${self:custom.stage}
      ENABLE_METRICS: ${env:ENABLE_METRICS, 0}
      LOGGING_CFG: ${env:LOGGING_CFG, "solvis_graphql_api/logging_aws.yaml"}
    warmup:
      littleWarmer:
        enabled:
          - test
          - prod
          - dev

resources:
  Resources:
    TheBlobBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3_bucket}